[2024-08-08 10:51:58,467][root][INFO] - {'prompts': 'data/original_prompts/human_assistant_instruct.json', 'users': 'data/users/users.json', 'start_prompts': 3000, 'end_prompts': 4000, 'n_users': 20, 'save_file': 'data/gold_responses/by_sims/gold_responses_3000_4000_prompts_20_users_full.json', 'model_config': {'model': 'meta-llama/Meta-Llama-3-8B-Instruct', 'download_dir': '/scr/jphilipp/stargate/pretrained_models/Meta-Llama-3-8B-Instruct', 'dtype': 'auto', 'tensor_parallel_size': 1}, 'generation_config': {'max_new_tokens': 2048, 'num_return_sequences': 1, 'temperature': 0.0}}
INFO 08-08 10:51:58 llm_engine.py:169] Initializing an LLM engine (v0.5.1) with config: model='meta-llama/Meta-Llama-3-8B-Instruct', speculative_config=None, tokenizer='meta-llama/Meta-Llama-3-8B-Instruct', skip_tokenizer_init=False, tokenizer_mode=auto, revision=None, rope_scaling=None, rope_theta=None, tokenizer_revision=None, trust_remote_code=False, dtype=torch.bfloat16, max_seq_len=8192, download_dir='/scr/jphilipp/stargate/pretrained_models/Meta-Llama-3-8B-Instruct', load_format=LoadFormat.AUTO, tensor_parallel_size=1, pipeline_parallel_size=1, disable_custom_all_reduce=False, quantization=None, enforce_eager=False, kv_cache_dtype=auto, quantization_param_path=None, device_config=cuda, decoding_config=DecodingConfig(guided_decoding_backend='outlines'), observability_config=ObservabilityConfig(otlp_traces_endpoint=None), seed=0, served_model_name=meta-llama/Meta-Llama-3-8B-Instruct, use_v2_block_manager=False, enable_prefix_caching=False)
INFO 08-08 10:52:00 weight_utils.py:218] Using model weights format ['*.safetensors']
INFO 08-08 10:52:03 model_runner.py:255] Loading model weights took 14.9595 GB
INFO 08-08 10:52:04 gpu_executor.py:84] # GPU blocks: 27961, # CPU blocks: 2048
INFO 08-08 10:52:05 model_runner.py:924] Capturing the model for CUDA graphs. This may lead to unexpected consequences if the model is not static. To run the model in eager mode, set 'enforce_eager=True' or use '--enforce-eager' in the CLI.
INFO 08-08 10:52:05 model_runner.py:928] CUDA graphs can take additional 1~3 GiB memory per GPU. If you are running out of memory, consider decreasing `gpu_memory_utilization` or enforcing eager mode. You can also reduce the `max_num_seqs` as needed to decrease memory usage.
INFO 08-08 10:52:10 model_runner.py:1117] Graph capturing finished in 5 secs.
[2024-08-08 10:52:11,104][root][INFO] - 20000
